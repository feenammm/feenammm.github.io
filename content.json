{"meta":{"title":"阿巴巴巴","subtitle":null,"description":null,"author":"wxy","url":"http://example.com","root":"/"},"pages":[{"title":"友情链接","date":"2021-04-15T01:22:16.594Z","updated":"2021-04-14T15:47:20.000Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-04-15T01:22:16.588Z","updated":"2021-04-14T15:47:20.000Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-15T01:22:16.599Z","updated":"2021-04-14T15:47:20.000Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-04-15T01:22:16.596Z","updated":"2021-04-14T15:47:20.000Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"mysql","slug":"mysql","date":"2021-04-11T12:51:41.000Z","updated":"2021-04-14T15:47:20.000Z","comments":true,"path":"2021/04/11/mysql/","link":"","permalink":"http://example.com/2021/04/11/mysql/","excerpt":"","text":"mysql连接数据库1234567891011# mysql 5 驱动 com.mysql.jdbc.Driverspring.datasource.username=rootspring.datasource.password=rootspring.datasource.url=jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8spring.datasource.driver-classs-name=com.mysql.jdbc.Driver# mysql 8 驱动 com.mysql.cj.jdbc.Driver 需要增加时区配置spring.datasource.username=rootspring.datasource.password=rootspring.datasource.url=jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghaispring.datasource.driver-classs-name=com.mysql.cj.jdbc.Driver useSSL=false 是否使用安全连接 useUnicode=true&amp;charactgerEncoding=UTF-8 使用utf-8的格式存取数据 serverTimezone=Asia/Shanghai 时区设置,还可以为GMT%wb8(GMT+8)","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"mybatis-plus","slug":"mybatis-plus","date":"2021-04-11T12:51:41.000Z","updated":"2021-04-16T06:19:40.362Z","comments":true,"path":"2021/04/11/mybatis-plus/","link":"","permalink":"http://example.com/2021/04/11/mybatis-plus/","excerpt":"","text":"mybatis-plus简化mybatis开发,对mybatis进行增强,不进行改变 特性 无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑 损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作 强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求 支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错 支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题 支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作 支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ） 内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用 内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库 内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询 内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作 依赖123456789101112131415&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 不要同时导入mybatis和mybatis-plus 使用 编写Dao,继承BaseMapper 继承了 BaseMapper 就完成了基本的crud 添加 @Mapper 或者 @Repository 表示为 Dao 层 添加启动类扫描 Mapper 包下的所有接口 @MapperScan(“com.wxy.dao”) 配置日志控制台打印: 123mybatis-plus: configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl 方法查询单个查询 selectById() selectOne() 查询多个 selectBatchIds(Arrays.asList(1,2,3)) selectList() 条件查询 selectByMap() 通过map自定义查询条件 分页查询 编写分页插件配置 12345678910111213141516171819202122232425package com.wxy.config.mybatisPlus;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.transaction.annotation.EnableTransactionManagement;import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;@EnableTransactionManagement@Configurationpublic class MyBatisPlusConfig &#123; @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() &#123; final MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor(); //分页配置 mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor()); return mybatisPlusInterceptor; &#125;&#125; 使用 123456public void testpage()&#123; Page&lt;User&gt; page = new Page&lt;&gt;(1,5); userMapper.selectPage(page,null); page.getRecords().forEach(System.out::println);&#125; 删除 deleteById() deleteByMap() deleteBatchId(Arrays.asList(1,2,3)) 逻辑删除 添加 deleted 字段 实体类中添加注解 @TableLogic 逻辑删除注解 配置逻辑删除组件 123456mybatis-plus: global-config: db-config: logic-delete-field: deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2) logic-delete-value: 1 # 逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0) 插入insert自动生成全局唯一id并回填 主键生成策略分布式系统唯一ID生成方案汇总 默认 ID_WORKER 全局唯一ID @TableId(type = IdType.ID_WORKER ) 雪花算法Twitter开源的分布式ID生成算法,结果是long型的. 使用41bit作为毫秒数,10bit作为机器ID(5bit数据中心,5bit机器ID),12bit作为毫秒内的流水号(每个节点每毫秒可以产生4096个ID),1bit符号为(永远为0) 主键自增 @TableId(type = IdType.AUTO) 实体类上添加 @TableId(type = IdType.AUTO) 注解 数据库字段是自增的 值 描述 AUTO 数据库自增(mysql) NONE 无主键ID INPUT 自定义输入 ASSIGN_ID 雪花算法,主键可以是Long,Integer,String类型 ASSIGN_UUID 不含中划线的UUID,主键是String类型 更新updateById() 通过条件自动动态配置sql,参数是对应的对象 自动填充 数据库 在表中新增字段 create_time update_time ,设置默认值(CURRENT_TIMESTAMP) 代码 实体类的字段上添加注解 @TableField(fill = FieldFill.INSERT) //在新增时进行填充 @TableField(fill = FieldFill.INSERT_UPDATE) //在新增和修改时进行填充 … 编写处理器处理注解 1234567891011121314151617181920212223import java.util.Date;import org.apache.ibatis.reflection.MetaObject;import org.springframework.stereotype.Component;import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;@Componentpublic class MyMetaObjectHandler implements MetaObjectHandler &#123; @Override public void insertFill(final MetaObject metaObject) &#123; this.setFieldValByName(&quot;createTime&quot;, new Date(), metaObject); this.setFieldValByName(&quot;updateTime&quot;, new Date(), metaObject); &#125; @Override public void updateFill(final MetaObject metaObject) &#123; this.setFieldValByName(&quot;updateTime&quot;, new Date(), metaObject); &#125;&#125; 乐观锁乐观锁 : 认为不会出现问题,无论干什么都不会加锁.如果出问题,再次更新 悲观锁 : 认为总是会出现问题,无论干什么都会去加锁,然后去操作 乐观锁实现方式： 取出记录时，获取当前 version 更新时，带上这个version 执行更新时， set version = newVersion where version = oldVersion 如果version不对，就更新失败 MP操作 添加 version 字段,默认值为 1 实体类添加对应字段,添加 @Version 乐观锁注解 注册组件 123456789101112131415161718192021222324package com.wxy.config.mybatisPlus;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.transaction.annotation.EnableTransactionManagement;import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;@EnableTransactionManagement@Configurationpublic class MyBatisPlusConfig &#123; @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() &#123; final MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor(); //乐观锁 mybatisPlusInterceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor()); return mybatisPlusInterceptor; &#125;&#125; 测试 1234567891011// 测试乐观锁成功！@Test public void testOptimisticLocker()&#123; // 1、查询用户信息 User user = userMapper.selectById(1L); // 2、修改用户信息 user.setName(&quot;kuangshen&quot;); user.setEmail(&quot;24736743@qq.com&quot;); // 3、执行更新操作 userMapper.updateById(user); &#125; 12345678910111213141516171819// 测试乐观锁失败！多线程下 @Test public void testOptimisticLocker2()&#123; // 线程 1 User user = userMapper.selectById(1L); user.setName(&quot;kuangshen111&quot;); user.setEmail(&quot;24736743@qq.com&quot;); // 模拟另外一个线程执行了插队操作 User user2 = userMapper.selectById(1L); user2.setName(&quot;kuangshen222&quot;); user2.setEmail(&quot;24736743@qq.com&quot;); userMapper.updateById(user2); // 自旋锁来多次尝试提交！ userMapper.updateById(user); // 如果没有乐观锁就会覆盖插队线程的值！&#125; 条件构造器Wrapper QueryWrapper LambdaQueryWrapper UpdateWrapper LambdaUpdateWrapper 方法 说明 ge 大于等于 gt 大于 le 小于等于 lt 小于 isNull 空 isNotNull 不为空 方法 说明 allEq 全eq eq 等于 = ne 不等于 &lt;&gt; 方法 说明 例子 between BETWEEN 值1 AND 值2 between(“age”, 18, 30) notBetween NOT BETWEEN 值1 AND 值2 方法 说明 like LIKE ‘%值%’ notlike NOT LIKE ‘%值%’ likeLeft LIKE ‘%值’ likeRight LIKE ‘值%’ 性能分析插件 添加插件 123456789/** * SQL执行效率插件 */@Bean @Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)// 设置 dev test 环境开启，保证我们的效率 public PerformanceInterceptor performanceInterceptor() &#123; PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor(); performanceInterceptor.setMaxTime(100); // ms设置sql执行的最大时间，如果超过了则不 执行 performanceInterceptor.setFormat(true); // 是否格式化代码 return performanceInterceptor;&#125; 执行sql,执行时间超过限定会抛出异常 新版已更换为 p6spy 代码自动生成依赖 123456789101112131415161718192021222324&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-extension&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt;&lt;/dependency&gt; 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596import java.util.ArrayList;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.FieldFill;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.po.TableFill;import com.baomidou.mybatisplus.generator.config.rules.DateType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;// 代码自动生成器public class CodeGenerator &#123; public static void main(final String[] args) &#123; // 需要构建一个 代码自动生成器 对象 final AutoGenerator mpg = new AutoGenerator(); // 配置策略 // 1、全局配置 final GlobalConfig gc = new GlobalConfig(); final String projectPath = System.getProperty(&quot;user.dir&quot;); gc.setOutputDir(projectPath + &quot;/demo/src/main/java&quot;); gc.setAuthor(&quot;abc&quot;); // 是否打开输出目录 gc.setOpen(false); // 是否覆盖 gc.setFileOverride(true); // 去Service的I前缀 gc.setServiceName(&quot;%sService&quot;); gc.setMapperName(&quot;%sDao&quot;); gc.setIdType(IdType.AUTO); gc.setDateType(DateType.ONLY_DATE); gc.setSwagger2(true); mpg.setGlobalConfig(gc); //2、设置数据源 final DataSourceConfig dsc = new DataSourceConfig(); dsc.setUrl( &quot;jdbc:mysql://localhost:3306/abbbb? useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;); dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;); dsc.setUsername(&quot;root&quot;); dsc.setPassword(&quot;123&quot;); dsc.setDbType(DbType.MYSQL); mpg.setDataSource(dsc); //3、包的配置 final PackageConfig pc = new PackageConfig(); //只需要改实体类名字 和包名 还有 数据库配置即可 pc.setModuleName(&quot;cat&quot;); pc.setParent(&quot;com.abc&quot;); pc.setEntity(&quot;model.entity&quot;); pc.setMapper(&quot;dao&quot;); pc.setService(&quot;service&quot;); pc.setController(&quot;controller&quot;); mpg.setPackageInfo(pc); //4、策略配置 final StrategyConfig strategy = new StrategyConfig(); strategy.setInclude(&quot;表名1&quot;,&quot;表名2&quot;); // 设置要映射的表名驼峰命名 strategy.setNaming(NamingStrategy.underline_to_camel); strategy.setColumnNaming(NamingStrategy.underline_to_camel); // 自动lombok； strategy.setEntityLombokModel(true); // 配置逻辑删除 strategy.setLogicDeleteFieldName(&quot;deleted&quot;); // 自动填充配置 final TableFill gmtCreate = new TableFill(&quot;create_time&quot;, FieldFill.INSERT); final TableFill gmtModified = new TableFill(&quot;update_time&quot;, FieldFill.INSERT_UPDATE); final ArrayList&lt;TableFill&gt; tableFills = new ArrayList&lt;&gt;(); tableFills.add(gmtCreate); tableFills.add(gmtModified); strategy.setTableFillList(tableFills); // 乐观锁 strategy.setVersionFieldName(&quot;version&quot;); strategy.setRestControllerStyle(true); // 驼峰转连字符 abc/hello_id // strategy.setControllerMappingHyphenStyle(true); mpg.setStrategy(strategy); mpg.execute(); //执行 &#125;&#125; mybatis-generator依赖 12345678910111213141516171819202122232425&lt;build&gt; &lt;plugins&gt; &lt;!--mybatis generator--&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt; &lt;configuration&gt; &lt;!-- 在控制台打印执行日志 --&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;!-- 重复生成时会覆盖之前的文件--&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;configurationFile&gt;src/main/resources/generatorConfig.xml&lt;/configurationFile&gt; &lt;/configuration&gt; &lt;!-- 数据库连接选择8.0以上的，因为用的mysql8.0--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.16&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 --&gt; &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;!--optional,指在创建class时，对注释进行控制--&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--jdbc的数据库连接 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/abc?useUnicode=true&amp;amp;characeterEncoding=utf-8&amp;amp;serverTimezone=UTC&quot; userId=&quot;root&quot; password=&quot;root&quot;&gt; &lt;/jdbcConnection&gt; &lt;!--非必须，类型处理器，在数据库类型和java类型之间的转换控制--&gt; &lt;javaTypeResolver&gt; &lt;!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 --&gt; &lt;!-- 不是 double 和 long 类型 --&gt; &lt;!-- 使用常用的基本类型代替 sql 包下的引用类型 --&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- targetPackage：生成的实体类所在的包 --&gt; &lt;!-- targetProject：生成的实体类所在的硬盘位置 --&gt; &lt;javaModelGenerator targetPackage=&quot;com.abc.model.entity&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- 是否允许子包 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 --&gt; &lt;sqlMapGenerator targetPackage=&quot;/mapper/abc&quot; targetProject=&quot;src/main/resources&quot;&gt; &lt;!-- 针对数据库的一个配置，是否把 schema 作为字包名 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 --&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.abc.dao&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- 针对 oracle 数据库的一个配置，是否把 schema 作为字包名 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!-- &lt;table tableName=&quot;%&quot; schema=&quot;abc&quot;--&gt; &lt;!-- enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;--&gt; &lt;!-- enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;--&gt; &lt;!-- selectByExampleQueryId=&quot;false&quot;/&gt;--&gt; &lt;!-- tableName是数据库中的表名，domainObjectName是生成的JAVA模型名，后面的参数不用改，要生成更多的表就在下面继续加table标签 --&gt; &lt;table tableName=&quot;abc&quot; domainObjectName=&quot;abc&quot; enableInsert=&quot;true&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt;","categories":[{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/categories/mybatis/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/tags/mybatis/"}]}],"categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/categories/mybatis/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/tags/mybatis/"}]}