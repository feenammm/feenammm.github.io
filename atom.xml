<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿巴巴巴</title>
  
  
  <link href="http://wajj.xin/atom.xml" rel="self"/>
  
  <link href="http://wajj.xin/"/>
  <updated>2021-04-21T03:19:38.453Z</updated>
  <id>http://wajj.xin/</id>
  
  <author>
    <name>wxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quartz</title>
    <link href="http://wajj.xin/2021/04/19/java/Quartz/Quartz/"/>
    <id>http://wajj.xin/2021/04/19/java/Quartz/Quartz/</id>
    <published>2021-04-19T07:24:46.000Z</published>
    <updated>2021-04-21T03:19:38.453Z</updated>
    
    <content type="html"><![CDATA[<p>(乱七八糟的复制)</p><h1 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，是完全由java开发的一个开源的任务日程管理系统，“任务进度管理器”就是一个在预先确定（被纳入日程）的时间到达时，负责执行（或者通知）其他软件组件的系统。<br>这些功能的主要接口(API)是Scheduler接口。它提供了简单的操作，例如：将任务纳入日程或者从日程中取消，开始/停止/暂停日程进度。</p><h2 id="定时器种类"><a href="#定时器种类" class="headerlink" title="定时器种类"></a>定时器种类</h2><p>Quartz 中五种类型的 Trigger：SimpleTrigger，CronTirgger，DateIntervalTrigger，NthIncludedDayTrigger和Calendar 类。<br>最常用的：<br>SimpleTrigger：用来触发只需执行一次或者在给定时间触发并且重复N次且每次执行延迟一定时间的任务<br>CronTrigger：按照cron表达式触发<br>calendars 方式：可以和cron配合使用，用cron表达式指定一个触发时间规律，用calendar指定一个范围</p><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><table><thead><tr><th>类型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>RAMJobStore本地运行</td><td>不要外部数据库，配置容易，运行速度快</td><td>因为调度程序信息是存储在被分配给JVM的内存里面，所以，当应用程序停止运行时，所有调度信息将被丢失。另外因为存储到JVM内存里面，所以可以存储多少个Job和Trigger将会受到限制</td></tr><tr><td>JDBCJobStore使用数据库</td><td>支持集群，因为所有的任务信息都会保存到数据库中，可以控制事物，还有就是如果应用服务器关闭或者重启，任务信息都不会丢失，并且可以恢复因服务器关闭或者重启而导致执行失败的任务</td><td>运行速度的快慢取决与连接数据库的快慢</td></tr></tbody></table><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><p><img src="/2021/04/19/java/Quartz/Quartz/20170204145258590" alt="这里写图片描述"></p><table><thead><tr><th>表名</th><th>存放数据</th></tr></thead><tbody><tr><td>qrtz_blob_triggers</td><td>以Blob 类型存储的触发器</td></tr><tr><td>qrtz_calendars</td><td>存放日历信息，quartz可配置一个日历来指定一个时间范围</td></tr><tr><td>qrtz_cron_triggers</td><td>存放cron类型的触发器</td></tr><tr><td>qrtz_fired_triggers</td><td>存放已触发的触发器</td></tr><tr><td>qrtz_job_details</td><td>存放一个jobDetail信息</td></tr><tr><td>qrtz_job_listeners</td><td>job监听器</td></tr><tr><td>qrtz_locks</td><td>存储程序的悲观锁的信息(假如使用了悲观锁)</td></tr><tr><td>qrtz_paused_trigger_graps</td><td>存放暂停掉的触发器</td></tr><tr><td>qrtz_scheduler_state</td><td>调度器状态</td></tr><tr><td>qrtz_simple_triggers</td><td>简单触发器的信息</td></tr><tr><td>qrtz_trigger_listeners</td><td>触发器监听器</td></tr><tr><td>qrtz_triggers</td><td>触发器的基本信息</td></tr></tbody></table><p>cron方式需要用到的4张数据表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qrtz_triggers，qrtz_cron_triggers，qrtz_fired_triggers，qrtz_job_details</span><br></pre></td></tr></table></figure><h2 id="字段详解"><a href="#字段详解" class="headerlink" title="字段详解"></a>字段详解</h2><h3 id="qrtz-blob-triggers"><a href="#qrtz-blob-triggers" class="headerlink" title="qrtz_blob_triggers"></a>qrtz_blob_triggers</h3><p>自定义触发器表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_blob_triggers` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器群组&#x27;</span>,</span><br><span class="line">  `BLOB_DATA` <span class="type">blob</span> COMMENT <span class="string">&#x27;基本信息&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),</span><br><span class="line">  KEY `SCHED_NAME` (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `qrtz_blob_triggers_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) <span class="keyword">REFERENCES</span> `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;用于 Quartz 用户用 JDBC 创建他们自己定制的 Trigger 类型，JobStore并不知道如何存储实例的时候&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="qrtz-calendars"><a href="#qrtz-calendars" class="headerlink" title="qrtz_calendars"></a>qrtz_calendars</h3><p>日历信息触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_calendars` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `CALENDAR_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器名称&#x27;</span>,</span><br><span class="line">  `CALENDAR` <span class="type">blob</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日历信息&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`CALENDAR_NAME`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;日历信息触发器&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="qrtz-cron-triggers"><a href="#qrtz-cron-triggers" class="headerlink" title="qrtz_cron_triggers"></a>qrtz_cron_triggers</h3><p>cron 表达式触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_cron_triggers` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器群组&#x27;</span>,</span><br><span class="line">  `CRON_EXPRESSION` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;cron表达式&#x27;</span>,</span><br><span class="line">  `TIME_ZONE_ID` <span class="type">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;时区&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `qrtz_cron_triggers_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) <span class="keyword">REFERENCES</span> `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;cron触发器&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="qrtz-fired-triggers"><a href="#qrtz-fired-triggers" class="headerlink" title="qrtz_fired_triggers"></a>qrtz_fired_triggers</h3><p>已触发的触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_fired_triggers` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `ENTRY_ID` <span class="type">varchar</span>(<span class="number">95</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;组织id&#x27;</span>,</span><br><span class="line">  `TRIGGER_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器组&#x27;</span>,</span><br><span class="line">  `INSTANCE_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;实例名称&#x27;</span>,</span><br><span class="line">  `FIRED_TIME` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发时间&#x27;</span>,</span><br><span class="line">  `SCHED_TIME` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划时间&#x27;</span>,</span><br><span class="line">  `PRIORITY` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权重&#x27;</span>,</span><br><span class="line">  `STATE` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">  `JOB_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;作业名称&#x27;</span>,</span><br><span class="line">  `JOB_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;作业群组&#x27;</span>,</span><br><span class="line">  `IS_NONCONCURRENT` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否并行&#x27;</span>,</span><br><span class="line">  `REQUESTS_RECOVERY` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否要求唤醒&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`ENTRY_ID`),</span><br><span class="line">  KEY `IDX_QRTZ_FT_TRIG_INST_NAME` (`SCHED_NAME`,`INSTANCE_NAME`),</span><br><span class="line">  KEY `IDX_QRTZ_FT_INST_JOB_REQ_RCVRY` (`SCHED_NAME`,`INSTANCE_NAME`,`REQUESTS_RECOVERY`),</span><br><span class="line">  KEY `IDX_QRTZ_FT_J_G` (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_FT_JG` (`SCHED_NAME`,`JOB_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_FT_T_G` (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_FT_TG` (`SCHED_NAME`,`TRIGGER_GROUP`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;存储与已触发的 Trigger 相关的状态信息，以及相联 Job的执行信息QRTZ_PAUSED_TRIGGER_GRPS 存储已暂停的 Trigger组的信息&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="qrtz-job-details"><a href="#qrtz-job-details" class="headerlink" title="qrtz_job_details"></a>qrtz_job_details</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_job_details` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;调度器名称&#x27;</span>,</span><br><span class="line">  `JOB_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;任务名称&#x27;</span>,</span><br><span class="line">  `JOB_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;任务群组&#x27;</span>,</span><br><span class="line">  `DESCRIPTION` <span class="type">varchar</span>(<span class="number">250</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;说明&#x27;</span>,</span><br><span class="line">  `JOB_CLASS_NAME` <span class="type">varchar</span>(<span class="number">250</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;任务class全路径&#x27;</span>,</span><br><span class="line">  `IS_DURABLE` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否持久化,值为1会把job持久化到数据库中&#x27;</span>,</span><br><span class="line">  `IS_NONCONCURRENT` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否并行&#x27;</span>,</span><br><span class="line">  `IS_UPDATE_DATA` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `REQUESTS_RECOVERY` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否要求唤醒&#x27;</span>,</span><br><span class="line">  `JOB_DATA` <span class="type">blob</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_J_REQ_RECOVERY` (`SCHED_NAME`,`REQUESTS_RECOVERY`),</span><br><span class="line">  KEY `IDX_QRTZ_J_GRP` (`SCHED_NAME`,`JOB_GROUP`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="qrtz-locks"><a href="#qrtz-locks" class="headerlink" title="qrtz_locks"></a>qrtz_locks</h3><p>在集群模式下，通过悲观锁来保证触发器有序的获取。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_locks` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `LOCK_NAME` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;锁名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`LOCK_NAME`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;通过悲观锁获取触发器&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="qrtz-paused-trigger-grps"><a href="#qrtz-paused-trigger-grps" class="headerlink" title="qrtz_paused_trigger_grps"></a>qrtz_paused_trigger_grps</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_paused_trigger_grps` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器组&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`TRIGGER_GROUP`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;被暂停的触发器&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="qrtz-scheduler-state"><a href="#qrtz-scheduler-state" class="headerlink" title="qrtz_scheduler_state"></a>qrtz_scheduler_state</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_scheduler_state` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;调度器名称&#x27;</span>,</span><br><span class="line">  `INSTANCE_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `LAST_CHECKIN_TIME` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后验证时间&#x27;</span>,</span><br><span class="line">  `CHECKIN_INTERVAL` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;时间间隔&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`INSTANCE_NAME`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="qrtz-simple-triggers"><a href="#qrtz-simple-triggers" class="headerlink" title="qrtz_simple_triggers"></a>qrtz_simple_triggers</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_simple_triggers` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器组&#x27;</span>,</span><br><span class="line">  `REPEAT_COUNT` <span class="type">bigint</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;重复次数&#x27;</span>,</span><br><span class="line">  `REPEAT_INTERVAL` <span class="type">bigint</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;重复间隔&#x27;</span>,</span><br><span class="line">  `TIMES_TRIGGERED` <span class="type">bigint</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发次数&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `qrtz_simple_triggers_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) <span class="keyword">REFERENCES</span> `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;存储简单的Trigger，包括重复次数，间隔，以及已触的次数&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="qrtz-triggers"><a href="#qrtz-triggers" class="headerlink" title="qrtz_triggers"></a>qrtz_triggers</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qrtz_triggers` (</span><br><span class="line">  `SCHED_NAME` <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;计划名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器名称&#x27;</span>,</span><br><span class="line">  `TRIGGER_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器群组&#x27;</span>,</span><br><span class="line">  `JOB_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;作业名称&#x27;</span>,</span><br><span class="line">  `JOB_GROUP` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;作业群组&#x27;</span>,</span><br><span class="line">  `DESCRIPTION` <span class="type">varchar</span>(<span class="number">250</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;说明信息&#x27;</span>,</span><br><span class="line">  `NEXT_FIRE_TIME` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;下次执行时间&#x27;</span>,</span><br><span class="line">  `PREV_FIRE_TIME` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;上次执行时间&#x27;</span>,</span><br><span class="line">  `PRIORITY` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;线程优先级&#x27;</span>,</span><br><span class="line">  `TRIGGER_STATE` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发状态此字段很重要&#x27;</span>,</span><br><span class="line">  `TRIGGER_TYPE` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;触发器类型&#x27;</span>,</span><br><span class="line">  `START_TIME` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;开始时间&#x27;</span>,</span><br><span class="line">  `END_TIME` <span class="type">bigint</span>(<span class="number">13</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;结束时间&#x27;</span>,</span><br><span class="line">  `CALENDAR_NAME` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日历名称&#x27;</span>,</span><br><span class="line">  `MISFIRE_INSTR` <span class="type">smallint</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `JOB_DATA` <span class="type">blob</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_T_J` (`SCHED_NAME`,`JOB_NAME`,`JOB_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_T_JG` (`SCHED_NAME`,`JOB_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_T_C` (`SCHED_NAME`,`CALENDAR_NAME`),</span><br><span class="line">  KEY `IDX_QRTZ_T_G` (`SCHED_NAME`,`TRIGGER_GROUP`),</span><br><span class="line">  KEY `IDX_QRTZ_T_STATE` (`SCHED_NAME`,`TRIGGER_STATE`),</span><br><span class="line">  KEY `IDX_QRTZ_T_N_STATE` (`SCHED_NAME`,`TRIGGER_NAME`,`TRIGGER_GROUP`,`TRIGGER_STATE`),</span><br><span class="line">  KEY `IDX_QRTZ_T_N_G_STATE` (`SCHED_NAME`,`TRIGGER_GROUP`,`TRIGGER_STATE`),</span><br><span class="line">  KEY `IDX_QRTZ_T_NEXT_FIRE_TIME` (`SCHED_NAME`,`NEXT_FIRE_TIME`),</span><br><span class="line">  KEY `IDX_QRTZ_T_NFT_ST` (`SCHED_NAME`,`TRIGGER_STATE`,`NEXT_FIRE_TIME`),</span><br><span class="line">  KEY `IDX_QRTZ_T_NFT_MISFIRE` (`SCHED_NAME`,`MISFIRE_INSTR`,`NEXT_FIRE_TIME`),</span><br><span class="line">  KEY `IDX_QRTZ_T_NFT_ST_MISFIRE` (`SCHED_NAME`,`MISFIRE_INSTR`,`NEXT_FIRE_TIME`,`TRIGGER_STATE`),</span><br><span class="line">  KEY `IDX_QRTZ_T_NFT_ST_MISFIRE_GRP` (`SCHED_NAME`,`MISFIRE_INSTR`,`NEXT_FIRE_TIME`,`TRIGGER_GROUP`,`TRIGGER_STATE`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `qrtz_triggers_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) <span class="keyword">REFERENCES</span> `qrtz_job_details` (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;触发器和作业绑定&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="quartz体系结构"><a href="#quartz体系结构" class="headerlink" title="quartz体系结构"></a>quartz体系结构</h2><h3 id="Quartz-API"><a href="#Quartz-API" class="headerlink" title="Quartz API"></a>Quartz API</h3><p>Quartz API的关键接口是：</p><ul><li>Scheduler - 与调度程序交互的主要API。可以注册Trigger和JobDetails到Scheduler中,当Trigger触发时，对应的Job就被执行</li><li>Job - 你想要调度器执行的任务组件需要实现的接口</li><li>JobDetail - 用于定义作业的实例。</li><li>Trigger（即触发器） - 定义执行给定作业的计划的触发条件。</li><li>JobBuilder - 用于定义/构建 JobDetail 实例，用于定义作业的实例。</li><li>TriggerBuilder - 用于定义/构建触发器实例。</li><li>Scheduler 的生命期，从 SchedulerFactory 创建它时开始，到 Scheduler 调用shutdown() 方法时结束；Scheduler 被创建后，可以增加、删除和列举 Job 和 Trigger，以及执行其它与调度相关的操作（如暂停 Trigger）。但是，Scheduler 只有在调用 start() 方法后，才会真正地触发 trigger（即执行 job）</li></ul><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>一个 job 就是一个实现了 Job 接口的类，该接口只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> JobExecutionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>job的一个 trigger 被触发后，execute() 方法会被 scheduler 的一个工作线程调用；传递给 execute() 方法的 JobExecutionContext 对象中保存着该 job 运行时的一些信息 ，执行 job 的 scheduler 的引用，触发 job 的 trigger 的引用，JobDetail 对象引用，以及一些其它信息。</p><p><strong>注解</strong></p><ul><li><p>@DisallowConcurrentExecution：将该注解加到job类上，告诉Quartz不要并发地执行同一个job定义（这里指特定的job类）的多个实例。</p></li><li><p>@PersistJobDataAfterExecution：将该注解加在job类上，告诉Quartz在成功执行了job类的execute方法后（没有发生任何异常），更新JobDetail中JobDataMap的数据，使得该job（即JobDetail）在下一次执行的时候，JobDataMap中是更新后的数据，而不是更新前的旧数据。</p></li></ul><p><strong>属性</strong></p><ul><li>Durability：如果一个job是非持久的，当没有活跃的trigger与之关联的时候，会被自动地从scheduler中删除。也就是说，非持久的job的生命期是由trigger的存在与否决定的；</li><li>RequestsRecovery：如果一个job是可恢复的，并且在其执行的时候，scheduler发生硬关闭（hard shutdown)（比如运行的进程崩溃了，或者关机了），则当scheduler重新启动的时候，该job会被重新执行。此时，该job的JobExecutionContext.isRecovering() 返回true。</li></ul><h3 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h3><p>Trigger 用于触发 Job 的执行。当你准备调度一个 job 时，你创建一个 Trigger 的实例，然后设置调度相关的属性。Trigger 也有一个相关联的 JobDataMap，用于给 Job 传递一些触发相关的参数。Quartz 自带了各种不同类型的 Trigger，最常用的主要是 SimpleTrigger 和 CronTrigger。</p><p>一个Job可以对应多个Trigger，但一个Trigger只能对应一个Job。</p><p>当一个trigger被触发时，与之关联的JobDetail实例会被加载，JobDetail引用的job类通过配置在Scheduler上的JobFactory进行初始化。默认的JobFactory实现，仅仅是调用job类的newInstance()方法，然后尝试调用JobDataMap中的key的setter方法。</p><h4 id="TRIGGER-STATE的值"><a href="#TRIGGER-STATE的值" class="headerlink" title="TRIGGER_STATE的值"></a>TRIGGER_STATE的值</h4><p>WAITING:等待 </p><p>PAUSED:暂停 </p><p>ACQUIRED:正常执行 </p><p>BLOCKED：阻塞 </p><p>ERROR：错误</p><h3 id="错过触发"><a href="#错过触发" class="headerlink" title="错过触发"></a>错过触发</h3><p>MISFIRE_INSTR</p><p>MisFire策略常量的定义在类CronTrigger中，列举如下：</p><table><thead><tr><th>常量值</th><th>含义</th></tr></thead><tbody><tr><td>withMisfireHandlingInstructionDoNothing</td><td>不触发立即执行,等待下次Cron触发频率到达时刻开始按照Cron频率依次执行</td></tr><tr><td>withMisfireHandlingInstructionIgnoreMisfires</td><td>以错过的第一个频率时间立刻开始执行,重做错过的所有频率周期后,当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行</td></tr><tr><td>withMisfireHandlingInstructionFireAndProceed</td><td>以当前时间为触发频率立刻触发一次执行,然后按照Cron频率依次执行</td></tr></tbody></table><p><strong>公共属性</strong></p><ul><li><p>TriggerKey属性：表示trigger的身份</p></li><li><p>jobKey属性：当trigger触发时被执行的job的身份；</p></li><li><p>startTime属性：设置trigger第一次触发的时间；该属性的值是java.util.Date类型，表示某个指定的时间点；有些类型的trigger，会在设置的startTime时立即触发，有些类型的trigger，表示其触发是在startTime之后开始生效。比如，现在是1月份，你设置了一个trigger–“在每个月的第5天执行”，然后你将startTime属性设置为4月1号，则该trigger第一次触发会是在几个月以后了(即4月5号)。</p></li><li><p>endTime属性：表示trigger失效的时间点。比如，”每月第5天执行”的trigger，如果其endTime是7月1号，则其最后一次执行时间是6月5号。</p></li></ul><p><strong>优先级</strong></p><p>如果Quartz可能没有足够的资源同时触发所有的trigger,可以设置哪个trigger优先使用Quartz的工作线程，设置<strong>priority</strong>属性。比如，你有N个trigger需要同时触发，但只有Z个工作线程，优先级最高的Z个trigger会被首先触发。如果没有为trigger设置优先级，trigger使用默认优先级，值为5；priority属性的值可以是任意整数，正数、负数都可以。</p><p>注意：只有同时触发的trigger之间才会比较优先级。10:59触发的trigger总是在11:00触发的trigger之前执行。</p><p>注意：如果trigger是可恢复的，在恢复后再调度时，优先级与原trigger是一样的。</p><p><strong>错过触发</strong>(misfire Instructions)</p><p>trigger还有一个重要的属性misfire；如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger。然后根据它们各自的misfire机制更新trigger的信息。</p><p><strong>日历</strong></p><p>Quartz的Calendar对象(不是java.util.Calendar对象)可以在定义和存储trigger的时候与trigger进行关联。Calendar用于从trigger的调度计划中排除时间段。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>将 Job 和 Trigger 注册到 Scheduler 时，可以为它们设置 key，配置其身份属性。 Job 和 Trigger 的 key（JobKey 和 TriggerKey）可以用于将 Job 和 Trigger 放到不同的分组（group）里，然后基于分组进行操作。同一个分组下的 Job 或 Trigger 的名称必须唯一，即一个 Job 或 Trigger 的 key 由名称（name）和分组（group）组成。</p><h3 id="JobDataMap"><a href="#JobDataMap" class="headerlink" title="JobDataMap"></a>JobDataMap</h3><p>JobDataMap中可以包含不限量的（序列化的）数据对象，在job实例执行的时候，可以使用其中的数据</p><p>JobDataMap是Java Map接口的一个实现，额外增加了一些便于存取基本类型的数据的方法。</p><p>将job加入到scheduler之前，在构建JobDetail时，可以将数据放入JobDataMap</p><p><strong>存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JobDetail job = newJob(DumbJob.class)</span><br><span class="line">    .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// name &quot;myJob&quot;, group &quot;group1&quot;</span></span><br><span class="line">    .usingJobData(<span class="string">&quot;jobSays&quot;</span>, <span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    .usingJobData(<span class="string">&quot;myFloatValue&quot;</span>, <span class="number">3.141f</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p><strong>取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DumbJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DumbJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> JobExecutionException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JobKey key = context.getJobDetail().getKey();</span><br><span class="line"></span><br><span class="line">        JobDataMap dataMap = context.getJobDetail().getJobDataMap();</span><br><span class="line"></span><br><span class="line">        String jobSays = dataMap.getString(<span class="string">&quot;jobSays&quot;</span>);</span><br><span class="line">        <span class="keyword">float</span> myFloatValue = dataMap.getFloat(<span class="string">&quot;myFloatValue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.err.println(<span class="string">&quot;Instance &quot;</span> + key + <span class="string">&quot; of DumbJob says: &quot;</span> + jobSays + <span class="string">&quot;, and val is: &quot;</span> + myFloatValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TriggerListeners和JobListeners"><a href="#TriggerListeners和JobListeners" class="headerlink" title="TriggerListeners和JobListeners"></a>TriggerListeners和JobListeners</h3><p><strong>Listeners</strong>是用于根据调度程序中发生的事件执行操作</p><p>与Trigger相关的事件包括：触发器触发，触发失灵，触发完成</p><p>与job相关的事件包括：job即将执行的通知，以及job完成执行时的通知</p><p><strong>使用Listeners</strong></p><p>要创建一个listener，只需创建一个实现org.quartz.TriggerListener和/或org.quartz.JobListener接口的对象。然后，listener在运行时会向调度程序注册，并且必须给出一个名称（或者，他们必须通过他们的getName（）方法来宣传自己的名字）。</p><p>为了方便起见，实现这些接口，您的类也可以扩展JobListenerSupport类或TriggerListenerSupport类，并且只需覆盖您感兴趣的事件。</p><p>listener与调度程序的ListenerManager一起注册，并配有描述listener希望接收事件的job/触发器的Matcher。</p><p><strong>添加对特定job感兴趣的JobListener：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.getListenerManager().addJobListener(myJobListener，KeyMatcher.jobKeyEquals(new JobKey(&quot;myJobName&quot;，&quot;myJobGroup&quot;)));</span><br></pre></td></tr></table></figure><p><strong>添加对特定组的所有job感兴趣的JobListener：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.getListenerManager().addJobListener(myJobListener, jobGroupEquals(&quot;myJobGroup&quot;));</span><br></pre></td></tr></table></figure><p><strong>添加对两个特定组的所有job感兴趣的JobListener：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.getListenerManager().addJobListener(myJobListener, or(jobGroupEquals(&quot;myJobGroup&quot;), jobGroupEquals(&quot;yourGroup&quot;)));</span><br></pre></td></tr></table></figure><p><strong>添加对所有job感兴趣的JobListener：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.getListenerManager().addJobListener(myJobListener, allJobs());</span><br></pre></td></tr></table></figure><h3 id="Job-Stores"><a href="#Job-Stores" class="headerlink" title="Job Stores"></a>Job Stores</h3><p>RAMJobStore    将所有数据保存在RAM中,速度快但易失</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</span><br></pre></td></tr></table></figure><p>JDBC JobStore    通过JDBC将其所有数据保存在数据库中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX</span><br></pre></td></tr></table></figure><h2 id="quartz-properties"><a href="#quartz-properties" class="headerlink" title="quartz.properties"></a>quartz.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调度标识名 集群中每一个实例都必须使用相同的名称 （区分特定的调度器实例）</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceName</span>=<span class="string">DefaultQuartzScheduler</span></span><br><span class="line"><span class="comment"># ID设置为自动获取 每一个必须不同 （所有调度器实例中是唯一的）</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceId</span>=<span class="string">AUTO</span></span><br><span class="line"><span class="comment"># 使用内存存储quartz的所有数据，包括job和trigger的配置</span></span><br><span class="line"><span class="comment">#org.quartz.jobStore.class  =  org.quartz.simpl.RAMJobStore</span></span><br><span class="line"><span class="comment"># 数据保存方式为持久化</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.class</span>=<span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="comment"># 表的前缀</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.tablePrefix</span>=<span class="string">QRTZ_</span></span><br><span class="line"><span class="comment"># 设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题</span></span><br><span class="line"><span class="comment"># org.quartz.jobStore.useProperties = true</span></span><br><span class="line"><span class="comment"># 加入集群 true 为集群 false不是集群</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.isClustered</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 调度实例失效的检查时间间隔</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.clusterCheckinInterval</span>=<span class="string">20000</span></span><br><span class="line"><span class="comment"># 容许的最大作业延长时间</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.misfireThreshold</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment"># ThreadPool 实现的类名</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.class</span>=<span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment"># 线程池中有10个线程，这意味着最多可以同时运行10个job</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadCount</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 线程优先级</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadPriority</span>=<span class="string">5（threadPriority 属性的最大值是常量 java.lang.Thread.MAX_PRIORITY，等于10。最小值为常量 java.lang.Thread.MIN_PRIORITY，为1）</span></span><br><span class="line"><span class="comment"># 自创建父线程</span></span><br><span class="line"><span class="comment"># org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread =  true</span></span><br><span class="line"><span class="comment"># 数据库别名</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.dataSource</span>=<span class="string">qzDS</span></span><br><span class="line"><span class="comment"># 设置数据源</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.URL</span>=<span class="string">jdbc:mysql://localhost:3306/quartz</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.maxConnection</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>job</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(<span class="keyword">final</span> JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间: &quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scheduler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScheduler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建调度器Scheduler</span></span><br><span class="line">        SchedulerFactory schedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">        Scheduler scheduler = schedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">// 2、创建JobDetail实例，并与PrintWordsJob类绑定(Job执行内容)</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(PrintJob.class)</span><br><span class="line">                                        .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 3、构建Trigger实例,每隔1s执行一次</span></span><br><span class="line">        Trigger trigger = TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;triggerGroup1&quot;</span>)</span><br><span class="line">                .startNow()<span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .withIntervalInSeconds(<span class="number">1</span>)<span class="comment">//每隔1s执行一次</span></span><br><span class="line">                .repeatForever()).build();<span class="comment">//一直执行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、绑定schedule和jobDetail</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------scheduler start ! ------------&quot;</span>);</span><br><span class="line">        <span class="comment">//5、执行</span></span><br><span class="line">        scheduler.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//睡眠</span></span><br><span class="line">        TimeUnit.MINUTES.sleep(<span class="number">1</span>);</span><br><span class="line">        scheduler.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------scheduler shutdown ! ------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(乱七八糟的复制)&lt;/p&gt;
&lt;h1 id=&quot;Quartz&quot;&gt;&lt;a href=&quot;#Quartz&quot; class=&quot;headerlink&quot; title=&quot;Quartz&quot;&gt;&lt;/a&gt;Quartz&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="java" scheme="http://wajj.xin/categories/java/"/>
    
    <category term="Quartz" scheme="http://wajj.xin/categories/java/Quartz/"/>
    
    
    <category term="java" scheme="http://wajj.xin/tags/java/"/>
    
    <category term="Quartz" scheme="http://wajj.xin/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://wajj.xin/2021/04/16/Linux/nginx/nginx/"/>
    <id>http://wajj.xin/2021/04/16/Linux/nginx/nginx/</id>
    <published>2021-04-16T13:21:10.000Z</published>
    <updated>2021-04-19T07:20:11.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>高性能的HTTP和反向代理服务器,也提供IMAP/POP3/SMTP服务</p><p>特点: </p><p>​    内存占用少</p><p>​    并发强(5w)</p><p>​    能够热部署</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>nginx配置文件中分为三部分:全局块,events块,http块</p><p><code>nginx.conf</code> 结构图可以这样概括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main        # 全局配置，对全局生效</span><br><span class="line">├── events  # 配置影响 Nginx 服务器或与用户的网络连接</span><br><span class="line">├── http    # 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置</span><br><span class="line">│   ├── upstream # 配置后端服务器具体地址，负载均衡配置不可或缺的部分</span><br><span class="line">│   ├── server   # 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块</span><br><span class="line">│   ├── server</span><br><span class="line">│   │   ├── location  # server 块可以包含多个 location 块，location 指令用于匹配 uri</span><br><span class="line">│   │   ├── location</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── ...</span><br></pre></td></tr></table></figure><p><strong>语法</strong></p><ol><li>配置文件由指令与指令块构成；</li><li>每条指令以 <code>;</code> 分号结尾，指令与参数间以空格符号分隔；</li><li>指令块以 <code>&#123;&#125;</code> 大括号将多条指令组织在一起；</li><li><code>include</code> 语句允许组合多个配置文件以提升可维护性；</li><li>使用 <code>#</code> 符号添加注释，提高可读性；</li><li>使用 <code>$</code> 符号使用变量；</li><li>部分指令的参数支持正则表达式；</li></ol><p>server 块可以包含多个 location 块，location 指令用于匹配 uri，语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location [ &#x3D; | ~ | ~* | ^~] uri &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指令后面：</p><ol><li><code>=</code> 精确匹配路径，用于不含正则表达式的 uri 前，如果匹配成功，不再进行后续的查找；</li><li><code>^~</code> 用于不含正则表达式的 uri； 前，表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找；</li><li><strong><code>~</code> 表示用该符号后面的正则去匹配路径，区分大小写；</strong></li><li><code>~*</code> 表示用该符号后面的正则去匹配路径，不区分大小写。跟 <code>~</code> 优先级都比较低，如有多个location的正则能匹配的话，则使用正则表达式最长的那个；</li></ol><p>如果 uri 包含正则表达式，则必须要有 <code>~</code> 或 <code>~*</code> 标志。</p><h2 id="正反向代理"><a href="#正反向代理" class="headerlink" title="正反向代理"></a>正反向代理</h2><p>正向代理:</p><p><img src="/2021/04/16/Linux/nginx/nginx/nginx/46bda7e8fc7.png" alt="img"></p><p>代理客户端,请求通过代理服务器进行互联网访问,隐藏了真实的客户端地址，代理服务器为客户端收发请求，使真实客户端对服务器不可见</p><p><img src="/2021/04/16/Linux/nginx/nginx/nginx/1cab81089.png" alt="img"></p><p>代理服务器端,客户端不需要任何配置,将请求发送给反向代理服务器,反向代理服务器会对请求进行分发,在客户端视角不知道有分发的过程,认为反向代理服务器和目标服务器是一个整体</p><p>服务器只暴露了反向代理服务器地址,隐藏了真实服务器地址,提高了安全性</p><p>配置:</p><p><img src="/2021/04/16/Linux/nginx/nginx/nginx/image-20210109222636733.png" alt="image-20210109222636733"></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p><img src="/2021/04/16/Linux/nginx/nginx/nginx/image-20210109225254430.png" alt="image-20210109225254430"></p><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。</p><p>内置策略为轮询，加权轮询，Ip hash。</p><ol><li><strong>轮询</strong>，默认方式，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务挂了，能自动剔除；</li><li><strong>weight</strong>，权重分配，指定轮询几率，权重越高，在被访问的概率越大，用于后端服务器性能不均的情况；</li><li><strong>ip_hash</strong>，每个请求按访问 IP 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以<strong>解决动态网页 session 共享问题</strong>。负载均衡每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的；</li><li><strong>fair</strong>（第三方），按后端服务器的响应时间分配，响应时间短的优先分配，依赖第三方插件 nginx-upstream-fair，需要先安装；</li></ol><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>在我们的开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。</p><p>让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。</p><p><strong>方式</strong></p><ul><li>纯粹把静态文件独立成单独的域名，放在独立的服务器上(主流)</li><li>动态跟静态文件混合在一起发布， 通过 Nginx 配置来分开</li></ul><p>建议搭配缓存使用</p><p>通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。</p><p>具体 expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。</p><p>设置为3d，表示在这 3 天之内访问这个URL，发送一个请求，比对服务器该文件最后更新时间没有变化。则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><p><img src="/2021/04/16/Linux/nginx/nginx/nginx/image-20210109231416408.png" alt="image-20210109231416408"></p><h2 id="GZip"><a href="#GZip" class="headerlink" title="GZip"></a>GZip</h2><p>使用 gzip 不仅需要 Nginx 配置，浏览器端也需要配合，需要在请求消息头中包含 <code>Accept-Encoding: gzip</code>（IE5 之后所有的浏览器都支持了，是现代浏览器的默认设置）。一般在请求 html 和 css 等静态资源的时候，支持的浏览器在 request 请求静态资源的时候，会加上 <code>Accept-Encoding: gzip</code> 这个 header，表示自己支持 gzip 的压缩方式，Nginx 在拿到这个请求的时候，如果有相应配置，就会返回经过 gzip 压缩过的文件给浏览器，并在 response 相应的时候加上 <code>content-encoding: gzip</code> 来告诉浏览器自己采用的压缩方式（因为浏览器在传给服务器的时候一般还告诉服务器自己支持好几种压缩方式），浏览器拿到压缩的文件后，根据自己的解压方式进行解析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;gzip.conf</span><br><span class="line"></span><br><span class="line">gzip on; # 默认off，是否开启gzip</span><br><span class="line">gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;x-javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;</span><br><span class="line"></span><br><span class="line"># 上面两个开启基本就能跑起了，下面的愿意折腾就了解一下</span><br><span class="line">gzip_static on;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_buffers 16 8k;</span><br><span class="line"># gzip_min_length 1k;</span><br><span class="line">gzip_http_version 1.1;</span><br></pre></td></tr></table></figure><p>稍微解释一下：</p><ol><li><strong>gzip_types</strong>：要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；</li><li><strong>gzip_static</strong>：默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 <code>.gz</code> 文件内容；</li><li><strong>gzip_proxied</strong>：默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；</li><li><strong>gzip_vary</strong>：用于在响应消息头中添加 <code>Vary：Accept-Encoding</code>，使代理服务器根据请求头中的 <code>Accept-Encoding</code> 识别是否启用 gzip 压缩；</li><li><strong>gzip_comp_level</strong>：gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6；</li><li><strong>gzip_buffers</strong>：获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得；</li><li><strong>gzip_min_length</strong>：允许压缩的页面最小字节数，页面字节数从header头中的 <code>Content-Length</code> 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；</li><li><strong>gzip_http_version</strong>：默认 1.1，启用 gzip 所需的 HTTP 最低版本；</li></ol><p>这个配置可以插入到 http 模块整个服务器的配置里，也可以插入到需要使用的虚拟主机的 <code>server</code> 或者下面的 <code>location</code> 模块中，当然像上面我们这样写的话就是被 include 到 http 模块中了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">apt-get install nginx</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>/usr/sbin/nginx：主程序</li><li>/etc/nginx：存放配置文件</li><li>/usr/share/nginx：存放静态文件</li><li>/var/log/nginx：存放日志</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nginx状态</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="comment"># 重新载入配置文件</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="comment"># 重启 Nginx</span></span><br><span class="line">nginx -s reopen</span><br><span class="line"><span class="comment"># 停止 Nginx</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx&quot;&gt;&lt;/a&gt;nginx&lt;/h1&gt;&lt;p&gt;高性能的HTTP和反向代理服务器,也提供IMAP/POP3/SMTP服务&lt;/p&gt;
&lt;p&gt;特点: &lt;/p&gt;
&lt;p&gt;​ </summary>
      
    
    
    
    <category term="Linux" scheme="http://wajj.xin/categories/Linux/"/>
    
    <category term="nginx" scheme="http://wajj.xin/categories/Linux/nginx/"/>
    
    
    <category term="Linux" scheme="http://wajj.xin/tags/Linux/"/>
    
    <category term="nginx" scheme="http://wajj.xin/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://wajj.xin/2021/04/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql/"/>
    <id>http://wajj.xin/2021/04/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql/</id>
    <published>2021-04-11T12:51:41.000Z</published>
    <updated>2021-04-19T07:20:11.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># mysql 5 驱动 com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.driver-classs-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line"># mysql 8 驱动 com.mysql.cj.jdbc.Driver 需要增加时区配置</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">spring.datasource.driver-classs-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p>useSSL=false</p><p>是否使用安全连接</p><p>useUnicode=true&amp;charactgerEncoding=UTF-8</p><p>使用utf-8的格式存取数据</p><p>serverTimezone=Asia/Shanghai</p><p>时区设置,还可以为GMT%wb8(GMT+8)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql&quot;&gt;&lt;a href=&quot;#mysql&quot; class=&quot;headerlink&quot; title=&quot;mysql&quot;&gt;&lt;/a&gt;mysql&lt;/h1&gt;&lt;h1 id=&quot;连接数据库&quot;&gt;&lt;a href=&quot;#连接数据库&quot; class=&quot;headerlink&quot; title=&quot;连接数</summary>
      
    
    
    
    <category term="mysql" scheme="http://wajj.xin/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://wajj.xin/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-plus</title>
    <link href="http://wajj.xin/2021/04/11/java/mybatis/mybatis-plus/"/>
    <id>http://wajj.xin/2021/04/11/java/mybatis/mybatis-plus/</id>
    <published>2021-04-11T12:51:41.000Z</published>
    <updated>2021-04-19T07:20:11.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h1><p>简化mybatis开发,对mybatis进行增强,不进行改变</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不要同时导入mybatis和mybatis-plus</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>编写Dao,继承BaseMapper<T></T></p><p>继承了 BaseMapper 就完成了基本的crud</p></li><li><p>添加 @Mapper 或者 @Repository 表示为 Dao 层</p></li><li><p>添加启动类扫描 Mapper 包下的所有接口</p><p>@MapperScan(“com.wxy.dao”)</p></li></ol><h1 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h1><p>控制台打印:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="单个查询"><a href="#单个查询" class="headerlink" title="单个查询"></a>单个查询</h3><ol><li>selectById()</li><li>selectOne()</li></ol><h3 id="查询多个"><a href="#查询多个" class="headerlink" title="查询多个"></a>查询多个</h3><ol><li>selectBatchIds(Arrays.asList(1,2,3))</li><li>selectList()</li></ol><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ol><li><p>selectByMap()</p><p>通过map自定义查询条件</p></li></ol><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ol><li><p>编写分页插件配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wxy.config.mybatisPlus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页配置</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testpage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ol><li>deleteById()</li><li>deleteByMap()</li><li>deleteBatchId(Arrays.asList(1,2,3))</li></ol><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><ol><li><p>添加 deleted 字段</p></li><li><p>实体类中添加注解 @TableLogic 逻辑删除注解</p></li><li><p>配置逻辑删除组件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      logic-delete-field: deleted  # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span><br><span class="line">      logic-delete-value: 1 # 逻辑已删除值(默认为 1)</span><br><span class="line">      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)</span><br></pre></td></tr></table></figure></li></ol><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>自动生成全局唯一id并回填</p><h3 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h3><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">分布式系统唯一ID生成方案汇总 </a></p><blockquote><p>默认 ID_WORKER 全局唯一ID</p><p>@TableId(type = IdType.ID_WORKER )</p></blockquote><h4 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h4><p>Twitter开源的分布式ID生成算法,结果是long型的.</p><p>使用41bit作为毫秒数,10bit作为机器ID(5bit数据中心,5bit机器ID),12bit作为毫秒内的流水号(每个节点每毫秒可以产生4096个ID),1bit符号为(永远为0)</p><blockquote><p>主键自增</p><p>@TableId(type = IdType.AUTO)</p></blockquote><ol><li>实体类上添加 @TableId(type = IdType.AUTO) 注解</li><li>数据库字段是自增的</li></ol><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库自增(mysql)</td></tr><tr><td>NONE</td><td>无主键ID</td></tr><tr><td>INPUT</td><td>自定义输入</td></tr><tr><td>ASSIGN_ID</td><td>雪花算法,主键可以是Long,Integer,String类型</td></tr><tr><td>ASSIGN_UUID</td><td>不含中划线的UUID,主键是String类型</td></tr></tbody></table><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>updateById()    </p><p>通过条件自动动态配置sql,参数是对应的对象</p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><blockquote><p>数据库</p></blockquote><ol><li><p>在表中新增字段 create_time   update_time ,设置默认值(CURRENT_TIMESTAMP)</p><p><img src="/2021/04/11/java/mybatis/mybatis-plus/mybatisplus/image-20210414212830705.png" alt="image-20210414212830705"></p></li></ol><blockquote><p>代码</p></blockquote><ol><li><p>实体类的字段上添加注解</p><ol><li>@TableField(fill = FieldFill.INSERT)                         //在新增时进行填充</li><li>@TableField(fill = FieldFill.INSERT_UPDATE)        //在新增和修改时进行填充</li><li>…</li></ol></li><li><p>编写处理器处理注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(<span class="keyword">final</span> MetaObject metaObject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(<span class="keyword">final</span> MetaObject metaObject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁 : 认为不会出现问题,无论干什么都不会加锁.如果出问题,再次更新</p><p>悲观锁 : 认为总是会出现问题,无论干什么都会去加锁,然后去操作</p><p>乐观锁实现方式：</p><ol><li>取出记录时，获取当前 version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ol><h3 id="MP操作"><a href="#MP操作" class="headerlink" title="MP操作"></a>MP操作</h3><ol><li><p>添加 version 字段,默认值为 1</p></li><li><p>实体类添加对应字段,添加 @Version 乐观锁注解</p></li><li><p>注册组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wxy.config.mybatisPlus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//乐观锁</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试乐观锁成功！</span></span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="comment">// 1、查询用户信息   </span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);  </span><br><span class="line">    <span class="comment">// 2、修改用户信息 </span></span><br><span class="line">    user.setName(<span class="string">&quot;kuangshen&quot;</span>);  </span><br><span class="line">    user.setEmail(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">// 3、执行更新操作    </span></span><br><span class="line">    userMapper.updateById(user); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试乐观锁失败！多线程下 </span></span><br><span class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 线程 1   </span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);   </span><br><span class="line">    user.setName(<span class="string">&quot;kuangshen111&quot;</span>);  </span><br><span class="line">    user.setEmail(<span class="string">&quot;24736743@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟另外一个线程执行了插队操作   </span></span><br><span class="line">    User user2 = userMapper.selectById(<span class="number">1L</span>);    </span><br><span class="line">    user2.setName(<span class="string">&quot;kuangshen222&quot;</span>);  </span><br><span class="line">    user2.setEmail(<span class="string">&quot;24736743@qq.com&quot;</span>); </span><br><span class="line"></span><br><span class="line">    userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自旋锁来多次尝试提交！  </span></span><br><span class="line">    userMapper.updateById(user); </span><br><span class="line">    <span class="comment">// 如果没有乐观锁就会覆盖插队线程的值！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><p>Wrapper</p><p>QueryWrapper    LambdaQueryWrapper</p><p>UpdateWrapper  LambdaUpdateWrapper</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>ge</td><td>大于等于</td></tr><tr><td>gt</td><td>大于</td></tr><tr><td>le</td><td>小于等于</td></tr><tr><td>lt</td><td>小于</td></tr><tr><td>isNull</td><td>空</td></tr><tr><td>isNotNull</td><td>不为空</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>allEq</td><td>全eq</td></tr><tr><td>eq</td><td>等于 =</td></tr><tr><td>ne</td><td>不等于 &lt;&gt;</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>between</td><td>BETWEEN 值1 AND 值2</td><td>between(“age”, 18, 30)</td></tr><tr><td>notBetween</td><td>NOT BETWEEN 值1 AND 值2</td><td></td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>like</td><td>LIKE ‘%值%’</td></tr><tr><td>notlike</td><td>NOT LIKE ‘%值%’</td></tr><tr><td>likeLeft</td><td>LIKE ‘%值’</td></tr><tr><td>likeRight</td><td>LIKE ‘值%’</td></tr></tbody></table><p><img src="/2021/04/11/java/mybatis/mybatis-plus/mybatis-plus/image-20210415150242376.png" alt="image-20210415150242376"></p><h1 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h1><ol><li><p>添加插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**    </span></span><br><span class="line"><span class="comment">* SQL执行效率插件    </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span><span class="comment">// 设置 dev test 环境开启，保证我们的效率 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();  </span><br><span class="line">    performanceInterceptor.setMaxTime(<span class="number">100</span>); <span class="comment">// ms设置sql执行的最大时间，如果超过了则不 执行   </span></span><br><span class="line">    performanceInterceptor.setFormat(<span class="keyword">true</span>); <span class="comment">// 是否格式化代码    return performanceInterceptor;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行sql,执行时间超过限定会抛出异常</p></li><li><p>新版已更换为 p6spy </p></li></ol><h1 id="代码自动生成"><a href="#代码自动生成" class="headerlink" title="代码自动生成"></a>代码自动生成</h1><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码自动生成器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要构建一个 代码自动生成器 对象</span></span><br><span class="line">        <span class="keyword">final</span> AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置策略</span></span><br><span class="line">        <span class="comment">// 1、全局配置</span></span><br><span class="line">        <span class="keyword">final</span> GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="keyword">final</span> String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/demo/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否打开输出目录</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否覆盖</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        gc.setMapperName(<span class="string">&quot;%sDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        gc.setIdType(IdType.AUTO);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、设置数据源</span></span><br><span class="line">        <span class="keyword">final</span> DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(</span><br><span class="line">                <span class="string">&quot;jdbc:mysql://localhost:3306/abbbb? useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、包的配置</span></span><br><span class="line">        <span class="keyword">final</span> PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        <span class="comment">//只需要改实体类名字 和包名 还有 数据库配置即可</span></span><br><span class="line">        pc.setModuleName(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.abc&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;model.entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;dao&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、策略配置</span></span><br><span class="line">        <span class="keyword">final</span> StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;表名1&quot;</span>,<span class="string">&quot;表名2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置要映射的表名驼峰命名</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动lombok；</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置逻辑删除</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动填充配置</span></span><br><span class="line">        <span class="keyword">final</span> TableFill gmtCreate = <span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="keyword">final</span> TableFill gmtModified = <span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(gmtCreate);</span><br><span class="line">        tableFills.add(gmtModified);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 驼峰转连字符  abc/hello_id</span></span><br><span class="line">        <span class="comment">//        strategy.setControllerMappingHyphenStyle(true);</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute(); <span class="comment">//执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis-generator"><a href="#mybatis-generator" class="headerlink" title="mybatis-generator"></a>mybatis-generator</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis generator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在控制台打印执行日志 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 重复生成时会覆盖之前的文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接选择8.0以上的，因为用的mysql8.0--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--optional,指在创建class时，对注释进行控制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc的数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/abc?useUnicode=true<span class="symbol">&amp;amp;</span>characeterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非必须，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不是 double 和 long 类型 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用常用的基本类型代替 sql 包下的引用类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：生成的实体类所在的包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：生成的实体类所在的硬盘位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.abc.model.entity&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否允许子包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;/mapper/abc&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 针对数据库的一个配置，是否把 schema 作为字包名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.abc.dao&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 针对 oracle 数据库的一个配置，是否把 schema 作为字包名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        &lt;table tableName=&quot;%&quot; schema=&quot;abc&quot;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--               selectByExampleQueryId=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- tableName是数据库中的表名，domainObjectName是生成的JAVA模型名，后面的参数不用改，要生成更多的表就在下面继续加table标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;abc&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableInsert</span>=<span class="string">&quot;true&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mybatis-plus&quot;&gt;&lt;a href=&quot;#mybatis-plus&quot; class=&quot;headerlink&quot; title=&quot;mybatis-plus&quot;&gt;&lt;/a&gt;mybatis-plus&lt;/h1&gt;&lt;p&gt;简化mybatis开发,对mybatis进行增强,不进行改变</summary>
      
    
    
    
    <category term="java" scheme="http://wajj.xin/categories/java/"/>
    
    <category term="mybatis" scheme="http://wajj.xin/categories/java/mybatis/"/>
    
    
    <category term="java" scheme="http://wajj.xin/tags/java/"/>
    
    <category term="mybatis" scheme="http://wajj.xin/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security</title>
    <link href="http://wajj.xin/2021/04/11/java/SpringSecurity/SpringSecurity/"/>
    <id>http://wajj.xin/2021/04/11/java/SpringSecurity/SpringSecurity/</id>
    <published>2021-04-11T12:51:41.000Z</published>
    <updated>2021-04-27T13:26:40.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><p><a href="https://github.com/lenve/spring-security-samples">https://github.com/lenve/spring-security-samples</a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>使用springboot进行版本管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是其中的两个</p><p><img src="/2021/04/11/java/SpringSecurity/SpringSecurity/1" alt="图片"></p><p>添加完依赖就可以使用了,默认开启保护所有接口</p><h2 id="默认实现"><a href="#默认实现" class="headerlink" title="默认实现"></a>默认实现</h2><p>会生成一个登陆页面,账号为<code>user</code>,密码是在控制台打印的一串UUID</p><ul><li><p>和用户相关的自动化配置类在 <code>UserDetailsServiceAutoConfiguration</code> 里边，在该类的 <code>getOrDeducePassword</code> 方法中，我们看到如下一行日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isPasswordGenerated()) &#123;</span><br><span class="line">logger.info(String.format(<span class="string">&quot;%n%nUsing generated security password: %s%n&quot;</span>, user.getPassword()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>getPassword()</code>可以查看具体用户名和密码</p></li><li><p><code>SecurityProperties</code>中用户名是<code>user</code>,密码是UUID</p></li><li><p>默认<code>isPasswordGenerated()</code>是<code>true</code></p></li></ul><h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><ul><li><p>默认用户定义在<code>SecurityProperties</code>类的User静态内部类中,配置注解有<code>spring.security</code>前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.security&quot;)</span></span><br><span class="line">publicclass SecurityProperties &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>所以在<code>application.properties</code>中添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">javaboy</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>application.properties</code>中定义的用户名密码最终是通过 set 方法注入到属性中去的，查看SecurityProperties.User#setPassword 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasLength(password)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.passwordGenerated = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>从这里我们可以看到，application.properties 中定义的密码在注入进来之后，还顺便设置了 passwordGenerated 属性为 false，这个属性设置为 false 之后，控制台就不会打印默认的密码了。</p><h2 id="内存存储的用户"><a href="#内存存储的用户" class="headerlink" title="内存存储的用户"></a>内存存储的用户</h2><p>方式1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">publicclass SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;admin&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>,<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先我们自定义 SecurityConfig 继承自 WebSecurityConfigurerAdapter，重写 configure 方法。</li><li>configure 方法中，我们通过 inMemoryAuthentication 来开启在内存中定义用户，withUser 中是用户名，password 中则是用户密码，roles 中是用户角色。</li><li>配置多个用户，用 and 相连</li></ul><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><p>由于 Spring Security 支持多种数据源，例如内存、数据库、LDAP 等，这些不同来源的数据被共同封装成了一个 UserDetailService 接口，任何实现了该接口的对象都可以作为认证数据源。可以通过重写 WebSecurityConfigurerAdapter 中的 userDetailsService 方法来提供一个 UserDetailService 实例进而配置多个用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">    manager.createUser(User.withUsername(<span class="string">&quot;javaboy&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">    manager.createUser(User.withUsername(<span class="string">&quot;江南一点雨&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;user&quot;</span>).build());</span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BCryptPasswordEncoder加密"><a href="#BCryptPasswordEncoder加密" class="headerlink" title="BCryptPasswordEncoder加密"></a>BCryptPasswordEncoder加密</h2><p>官方推荐使用<code>BCryptPasswordEncoder</code>,使用 BCrypt 强哈希函数</p><p>使用时可以选择提供 strength 和 SecureRandom 实例。</p><ul><li><p>strength 越大，密钥的迭代次数越多，密钥迭代次数为 2^strength。strength 取值在 4~31 之间，默认为 10。</p></li><li><p>SecureRandom 生成加密强随机数</p></li><li><p>自带盐值</p></li></ul><h3 id="PasswordEncoder"><a href="#PasswordEncoder" class="headerlink" title="PasswordEncoder"></a>PasswordEncoder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">publicinterface PasswordEncoder &#123;</span><br><span class="line">    <span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line">        returnfalse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>encode 方法用来对明文密码进行加密，返回加密之后的密文。</li><li>matches 方法是一个密码校对方法，用户传的明文密码和数据库中保存的密文密码作为参数，传到方法中，根据返回的 Boolean 值判断是否输入正确。</li><li>upgradeEncoding 是否还要进行再次加密，这个一般来说就不用了。</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在<code>SecurityConfig </code> 中 添加 <code>PasswordEncoder </code>的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">publicclass SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return NoOpPasswordEncoder.getInstance(); //不对密码进行加密</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Security 5.0 开始需要选择密码加密方式,不然会报错</p><h2 id="配置登录页面"><a href="#配置登录页面" class="headerlink" title="配置登录页面"></a>配置登录页面</h2><p>SecurityConfig 类中重写 <code>configure(WebSecurity web)</code> 和 <code>configure(HttpSecurity http)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">publicclass SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>web.ignoring() 用来配置忽略掉的 URL 地址，一般对于静态文件，我们可以采用此操作。</li><li>如果我们使用 XML 来配置 Spring Security ，里边会有一个重要的标签 <code>&lt;http&gt;</code>，HttpSecurity 提供的配置方法 都对应了该标签。</li><li>authorizeRequests 对应了 <code>&lt;intercept-url&gt;</code>,用于拦截url</li><li>formLogin 对应了 <code>&lt;formlogin&gt;</code>。</li><li>loginProcessingUrl 配置了登录的请求路径</li><li>and 方法表示结束当前标签，上下文回到HttpSecurity，开启新一轮的配置。</li><li>permitAll 表示不拦截配置的接口。</li><li>关闭 csrf </li></ol><p>配置页面</p><ol><li><p>当我们定义了登录页面为 /login.html 的时,没有配置 loginProcessingUrl，Spring Security 也会帮我们自动注册一个 /login.html 的接口，用来处理登录逻辑。</p><p>FormLoginConfigurer 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateAuthenticationDefaults</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (loginProcessingUrl == <span class="keyword">null</span>) &#123;</span><br><span class="line">loginProcessingUrl(loginPage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>登录表单中输入框的参数默认是 username 和 password</p><p>FormLoginConfigurer 类构造方法中，配置了指定变量值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormLoginConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">new</span> UsernamePasswordAuthenticationFilter(), <span class="keyword">null</span>);</span><br><span class="line">usernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">.loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">.usernameParameter(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">.passwordParameter(<span class="string">&quot;passwd&quot;</span>)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><p>注意修改前端页面 input 的 name 属性值和服务端的对应。</p></li></ol><h2 id="登录回调"><a href="#登录回调" class="headerlink" title="登录回调"></a>登录回调</h2><p>分为 <code>前后端分离登录</code> 和 <code>前后端不分登录</code></p><h3 id="前后端分离登录"><a href="#前后端分离登录" class="headerlink" title="前后端分离登录"></a>前后端分离登录</h3><p>在前后端分离这样的开发架构下，前后端的交互都是通过 JSON 来进行，无论登录成功还是失败，都不会有什么服务端跳转或者客户端跳转之类。前端收到了登录结果,根据结果进行判断,然后跳转</p><h4 id="登录数据保存状态"><a href="#登录数据保存状态" class="headerlink" title="登录数据保存状态"></a>登录数据保存状态</h4><p><strong>无状态登录</strong></p><p>session 是有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理</p><p>例如登录：用户登录后，我们把用户的信息保存在服务端 session 中，并且给用户一个 cookie 值，记录对应的 session，然后下次请求，用户携带 cookie 值来（这一步有浏览器自动完成），我们就能识别到对应 session，从而找到用户的信息。</p><p>缺点:</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，不支持集群化部署</li></ul><p><strong>无状态登录</strong></p><p>jwt 微服务集群中的每个服务，对外提供的都使用 RESTful 风格的接口。而 RESTful 风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li>服务端不保存任何客户端请求者信息</li><li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li></ul><p>好处</p><ul><li>客户端请求不依赖服务端的信息，多次请求不需要必须访问到同一台服务器</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩（可以方便的进行集群化部署）</li><li>减小服务端存储压力</li></ul><h5 id="实现无状态登录"><a href="#实现无状态登录" class="headerlink" title="实现无状态登录"></a>实现无状态登录</h5><ul><li>首先客户端发送账户名/密码到服务端进行认证</li><li>认证通过后，服务端将用户信息加密并且编码成一个 token，返回给客户端</li><li>以后客户端每次发送请求，都需要携带认证的 token</li><li>服务端对客户端发送来的 token 进行解密，判断是否有效，并且获取用户登录信息</li></ul><h4 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h4><p>使用<code>successHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.successHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    Object principal = authentication.getPrincipal();</span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>successHandler 方法的参数是一个 AuthenticationSuccessHandler 对象，这个对象中我们要实现的方法是 onAuthenticationSuccess。</p><p>onAuthenticationSuccess 方法有三个参数，分别是：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>Authentication</li></ul><p>有了前两个参数，我们就可以在这里随心所欲的返回数据了。利用 HttpServletRequest 我们可以做服务端跳转，利用 HttpServletResponse 我们可以做客户端跳转，当然，也可以返回 JSON 数据。</p><p>第三个 Authentication 参数则保存了我们刚刚登录成功的用户信息。</p><h4 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h4><p>失败的回调 <code>AuthenticationFailureHandler</code> 也是三个参数，前两个就不用说了，第三个是一个 Exception，对于登录失败，会有不同的原因，Exception 中则保存了登录失败的原因，我们可以将之通过 JSON 返回到前端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    RespBean respBean = RespBean.error(e.getMessage());</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">        respBean.setMsg(<span class="string">&quot;账户被锁定，请联系管理员!&quot;</span>);</span><br><span class="line">    &#125; elseif (e <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">        respBean.setMsg(<span class="string">&quot;密码过期，请联系管理员!&quot;</span>);</span><br><span class="line">    &#125; elseif (e <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">        respBean.setMsg(<span class="string">&quot;账户过期，请联系管理员!&quot;</span>);</span><br><span class="line">    &#125; elseif (e <span class="keyword">instanceof</span> DisabledException) &#123;</span><br><span class="line">        respBean.setMsg(<span class="string">&quot;账户被禁用，请联系管理员!&quot;</span>);</span><br><span class="line">    &#125; elseif (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">        respBean.setMsg(<span class="string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(respBean));</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 Spring Security 中，用户名查找失败对应的异常是：</p><ul><li>UsernameNotFoundException</li></ul><p>密码匹配失败对应的异常是：</p><ul><li>BadCredentialsException</li></ul><p>但是我们在登录失败的回调中，却总是看不到 UsernameNotFoundException 异常，无论用户名还是密码输入错误，抛出的异常都是 BadCredentialsException。</p><h4 id="未认证处理方案"><a href="#未认证处理方案" class="headerlink" title="未认证处理方案"></a>未认证处理方案</h4><p>在前后端分离中，如果用户没有登录就访问一个需要认证后才能访问的页面，这个时候，我们不应该让用户重定向到登录页面，而是给用户一个尚未登录的提示，前端收到提示之后，再自行决定页面跳转。</p><p>要解决这个问题，就涉及到 Spring Security 中的一个接口 <code>AuthenticationEntryPoint</code> ，该接口有一个实现类：<code>LoginUrlAuthenticationEntryPoint</code> ，该类中有一个方法 <code>commence</code></p><p>这个方法是用来决定到底是要重定向还是要 forward，默认情况下请求使用重定向</p><p>重写这个方法，在方法中返回 JSON 即可，不再做重定向操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.csrf().disable().exceptionHandling()</span><br><span class="line">.authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(<span class="string">&quot;尚未登录，请先登录&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 Spring Security 的配置中加上自定义的 <code>AuthenticationEntryPoint</code> 处理方法，该方法中直接返回相应的 JSON 提示即可。这样，如果用户再去直接访问一个需要认证之后才可以访问的请求，就不会发生重定向操作了，服务端会直接给浏览器一个 JSON 提示，浏览器收到 JSON 之后，该干嘛干嘛。</p><h4 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h4><p>前后端分离项目，注销登录成功后返回 JSON 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.logout()</span><br><span class="line">.logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">.logoutSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><h3 id="前后端不分离登录"><a href="#前后端不分离登录" class="headerlink" title="前后端不分离登录"></a>前后端不分离登录</h3><h4 id="登录成功回调"><a href="#登录成功回调" class="headerlink" title="登录成功回调"></a>登录成功回调</h4><p>登录成功重定向 URL 相关的方法有两个,配置时只需要配置一个即可</p><ul><li>defaultSuccessUrl<ul><li>defaultSuccessUrl 有一个重载的方法，我们先说一个参数的 defaultSuccessUrl 方法。如果我们在 defaultSuccessUrl 中指定登录成功的跳转页面为 <code>/index</code>，此时分两种情况，如果你是直接在浏览器中输入的登录地址，登录成功后，就直接跳转到 <code>/index</code>，如果你是在浏览器中输入了其他地址，例如 <code>http://localhost:8080/hello</code>，结果因为没有登录，又重定向到登录页面，此时登录成功后，就不会来到 <code>/index</code> ，而是来到 <code>/hello</code> 页面。</li><li>defaultSuccessUrl 还有一个重载的方法，第二个参数如果不设置默认为 false，也就是我们上面的的情况，如果手动设置第二个参数为 true，则 defaultSuccessUrl 的效果和 successForwardUrl 一致。</li></ul></li><li>successForwardUrl<ul><li>successForwardUrl 表示不管你是从哪里来的，登录后一律跳转到 successForwardUrl 指定的地址。例如 successForwardUrl 指定的地址为 <code>/index</code> ，你在浏览器地址栏输入 <code>http://localhost:8080/hello</code>，结果因为没有登录，重定向到登录页面，当你登录成功之后，就会服务端跳转到 <code>/index</code> 页面；或者你直接就在浏览器输入了登录页面地址，登录成功后也是来到 <code>/index</code>。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">.usernameParameter(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">.passwordParameter(<span class="string">&quot;passwd&quot;</span>)</span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>) <span class="comment">// 只需要配置一个</span></span><br><span class="line"><span class="comment">// .successForwardUrl(&quot;/index&quot;) // 只需要配置一个</span></span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><h4 id="登录失败回调"><a href="#登录失败回调" class="headerlink" title="登录失败回调"></a>登录失败回调</h4><p>与登录成功相似，登录失败也是有两个方法,配置时只需要配置一个即可</p><ul><li>failureUrl : 在登录失败之后，会发生重定向。</li><li>failureForwardUrl : 登录失败之后会发生服务端跳转</li></ul><h4 id="注销登录-1"><a href="#注销登录-1" class="headerlink" title="注销登录"></a>注销登录</h4><p>注销登录的默认接口是 <code>/logout</code>，我们也可以配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.logout()</span><br><span class="line">.logoutUrl(<span class="string">&quot;/logout&quot;</span>) <span class="comment">// 配置一个</span></span><br><span class="line">.logoutRequestMatcher(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">&quot;/logout&quot;</span>,<span class="string">&quot;POST&quot;</span>)) <span class="comment">// 配置一个</span></span><br><span class="line">.logoutSuccessUrl(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">.deleteCookies() <span class="comment">//清除 cookie</span></span><br><span class="line">.clearAuthentication(<span class="keyword">true</span>) <span class="comment">//清除认证信息</span></span><br><span class="line">.invalidateHttpSession(<span class="keyword">true</span>) <span class="comment">//使 HttpSession 失效</span></span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><ol><li>默认注销的 URL 是 <code>/logout</code>，是一个 GET 请求，我们可以通过 logoutUrl 方法来修改默认的注销 URL。</li><li>logoutRequestMatcher 方法不仅可以修改注销 URL，还可以修改请求方式，实际项目中，这个方法和 logoutUrl 任意设置一个即可。</li><li>logoutSuccessUrl 表示注销成功后要跳转的页面。</li><li>deleteCookies 用来清除 cookie。</li><li>clearAuthentication 和 invalidateHttpSession 分别表示清除认证信息和使 HttpSession 失效，默认可以不用配置，默认就会清除。</li></ol><h2 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h2><p>在 Spring Security 的 configure(HttpSecurity http) 方法中配置拦截规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        .antMatchers(&quot;&#x2F;admin&#x2F;**&quot;).hasRole(&quot;admin&quot;)</span><br><span class="line">        .antMatchers(&quot;&#x2F;user&#x2F;**&quot;).hasRole(&quot;user&quot;)</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><ol><li>如果请求路径满足 <code>/admin/**</code> 格式，则用户需要具备 admin 角色。</li><li>如果请求路径满足 <code>/user/**</code> 格式，则用户需要具备 user 角色。</li><li>剩余的其他格式的请求路径，只需要认证（登录）后就可以访问。</li></ol><p>使用了 Ant 风格的路径匹配符</p><table><thead><tr><th align="left">通配符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">匹配多层路径</td></tr><tr><td align="left">*</td><td align="left">匹配一层路径</td></tr><tr><td align="left">?</td><td align="left">匹配任意单个字符</td></tr></tbody></table><p>代码中配置的三条规则的顺序非常重要，Spring Security 在匹配的时候是按照从上往下的顺序来匹配，一旦匹配到了就不继续匹配了，<strong>「所以拦截规则的顺序不能写错」</strong>。</p><h3 id="角色继承"><a href="#角色继承" class="headerlink" title="角色继承"></a>角色继承</h3><p>SecurityConfig 中添加角色继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">    hierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_user&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> hierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置时，需要给角色手动加上 <code>ROLE_</code> 前缀。上面的配置表示 <code>ROLE_admin</code> 自动具备 <code>ROLE_user</code> 的权限。</p><h2 id="使用数据库中用户信息"><a href="#使用数据库中用户信息" class="headerlink" title="使用数据库中用户信息"></a>使用数据库中用户信息</h2><p>Spring Security 支持多种不同的数据源，这些不同的数据源最终都将被封装成 UserDetailsService 的实例</p><p><code>UserDetailsService</code> 的实现类中，除了 InMemoryUserDetailsManager 之外，还有一个 JdbcUserDetailsManager，使用 JdbcUserDetailsManager 可以让我们通过 JDBC 的方式将数据库和 Spring Security 连接起来。</p><p><strong>脚本</strong></p><p>JdbcUserDetailsManager 自己提供了一个数据库模型，这个数据库模型保存在如下位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org&#x2F;springframework&#x2F;security&#x2F;core&#x2F;userdetails&#x2F;jdbc&#x2F;users.ddl</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(username varchar_ignorecase(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,password varchar_ignorecase(<span class="number">500</span>) <span class="keyword">not</span> <span class="keyword">null</span>,enabled <span class="type">boolean</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> authorities (username varchar_ignorecase(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,authority varchar_ignorecase(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">constraint</span> fk_authorities_users <span class="keyword">foreign</span> key(username) <span class="keyword">references</span> users(username));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index ix_auth_username <span class="keyword">on</span> authorities (username,authority);</span><br></pre></td></tr></table></figure><p>脚本中有一种数据类型 varchar_ignorecase，这个其实是针对 HSQLDB 数据库创建的，MySQL 并不支持这种数据类型，所以需要手动调整数据类型，将 varchar_ignorecase 改为 varchar 。</p><p>执行完 SQL 脚本后，有两张表：users 和 authorities。</p><ul><li>users 表中保存用户的基本信息，包括用户名、用户密码以及账户是否可用。</li><li>authorities 中保存了用户的角色。</li><li>authorities 和 users 通过 username 关联起来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JdbcUserDetailsManager manager = <span class="keyword">new</span> JdbcUserDetailsManager();</span><br><span class="line">    manager.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">if</span> (!manager.userExists(<span class="string">&quot;javaboy&quot;</span>)) &#123;</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;javaboy&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!manager.userExists(<span class="string">&quot;江南一点雨&quot;</span>)) &#123;</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;江南一点雨&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;user&quot;</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先构建一个 JdbcUserDetailsManager 实例。</li><li>给 JdbcUserDetailsManager 实例添加一个 DataSource 对象。</li><li>调用 userExists 方法判断用户是否存在，如果不存在，就创建一个新的用户出来（因为每次项目启动时这段代码都会执行，所以加一个判断，避免重复创建用户）。</li><li>用户的创建方法和我们之前 InMemoryUserDetailsManager 中的创建方法基本一致。</li></ol><p>这里的 createUser 或者 userExists 方法其实都是调用写好的 SQL 去判断的</p><p><img src="/2021/04/11/java/SpringSecurity/SpringSecurity/2.png"></p><p><img src="/2021/04/11/java/SpringSecurity/SpringSecurity/3.png"></p><p>如果在数据库中将用户的 enabled 属性设置为 false，表示禁用该账户，此时再使用该账户登录就会登录失败。</p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><h4 id="定义用户实体类-实现-UserDetails"><a href="#定义用户实体类-实现-UserDetails" class="headerlink" title="定义用户实体类 实现 UserDetails"></a>定义用户实体类 实现 UserDetails</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity(name = &quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> accountNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> accountNonLocked;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">    <span class="meta">@ManyToMany(fetch = FetchType.EAGER,cascade = CascadeType.PERSIST)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : getRoles()) &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其他 get/set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义-UserService-实现-UserDetailsService"><a href="#定义-UserService-实现-UserDetailsService" class="headerlink" title="定义 UserService 实现 UserDetailsService"></a>定义 UserService 实现 UserDetailsService</h4><p>实现该接口，就要实现接口中的方法，也就是 loadUserByUsername ，这个方法的参数就是用户在登录的时候传入的用户名，根据用户名去查询用户信息（查出来之后，系统会自动进行密码比对）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userDao.findUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-SecurityConfig-中配置用户"><a href="#在-SecurityConfig-中配置用户" class="headerlink" title="在 SecurityConfig 中配置用户"></a>在 SecurityConfig 中配置用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserService userService;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.userDetailsService(userService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动登录功能"><a href="#自动登录功能" class="headerlink" title="自动登录功能"></a>自动登录功能</h2><h3 id="rememberMe"><a href="#rememberMe" class="headerlink" title="rememberMe"></a>rememberMe</h3><p>Spring Security 中添加<code> .rememberMe()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line"><span class="comment">//            .key(&quot;javaboy&quot;)</span></span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/11/java/SpringSecurity/SpringSecurity/4.png" alt="图片"></p><p>默认的登录页面多了一个选项，就是记住我。我们输入用户名密码，并且勾选上记住我这个框，然后点击登录按钮执行登录操作</p><p>登录数据中，除了 username 和 password 之外，还有一个 remember-me</p><p><img src="/2021/04/11/java/SpringSecurity/SpringSecurity/5" alt="图片"></p><p>登录成功之后，就会增加 cookie</p><p><img src="/2021/04/11/java/SpringSecurity/SpringSecurity/image-20210426175205291.png" alt="image-20210426175205291"></p><p>cookie是 Base64 加密的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javaboy:1589104055373:2578ffbc26485c534a2ef929ac2efc47</span><br></pre></td></tr></table></figure><ol><li>第一段是用户名</li><li>第二段是一个两周后的时间戳</li><li>第三段是使用 MD5 散列函数算出来的值，他的明文格式是 <code>username + &quot;:&quot; + tokenExpiryTime + &quot;:&quot; + password + &quot;:&quot; + key</code>，最后的 key 是一个散列盐值，可以用来防治令牌被修改。</li></ol><p><strong>登录流程</strong></p><p>在浏览器关闭后，并重新打开之后，用户再去访问 hello 接口，此时会携带着 cookie 中的 remember-me 到服务端，服务到拿到值之后，可以方便的计算出用户名和过期时间，再根据用户名查询到用户密码，然后通过 MD5 散列函数计算出散列值，再将计算出的散列值和浏览器传递来的散列值进行对比，就能确认这个令牌是否有效。</p><p><strong>源码位置</strong></p><p><strong>令牌生成的过程</strong></p><p><code>TokenBasedRememberMeServices#onLoginSuccess</code></p><ol><li>首先从登录成功的 Authentication 中提取出用户名/密码。</li><li>由于登录成功之后，密码可能被擦除了，所以，如果一开始没有拿到密码，就再从 UserDetailsService 中重新加载用户并重新获取密码。</li><li>再接下来去获取令牌的有效期，令牌有效期默认就是两周。</li><li>再接下来调用 makeTokenSignature 方法去计算散列值，实际上就是根据 username、令牌有效期以及 password、key 一起计算一个散列值。如果我们没有自己去设置这个 key，默认是在 RememberMeConfigurer#getKey 方法中进行设置的，它的值是一个 UUID 字符串。</li><li>最后，将用户名、令牌有效期以及计算得到的散列值放入 Cookie 中。</li></ol><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>由于我们自己没有设置 key，key 默认值是一个 UUID 字符串，这样会带来一个问题，就是如果服务端重启，这个 key 会变，这样就导致之前派发出去的所有 remember-me 自动登录令牌失效，所以，我们可以指定这个 key。指定方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">            .key(<span class="string">&quot;javaboy&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析的过程</strong></p><p>提取出 cookie 信息，并对 cookie 信息进行解码，解码之后，再调用 processAutoLoginCookie 方法去做校验，processAutoLoginCookie 方法的代码我就不贴了，核心流程就是首先获取用户名和过期时间，再根据用户名查询到用户密码，然后通过 MD5 散列函数计算出散列值，再将拿到的散列值和浏览器传递来的散列值进行对比，就能确认这个令牌是否有效，进而确认登录是否有效。</p><h3 id="持久化令牌"><a href="#持久化令牌" class="headerlink" title="持久化令牌"></a>持久化令牌</h3><p>持久化令牌就是在基本的自动登录功能基础上，又增加了新的校验参数，来提高系统的安全性，这一些都是由开发者在后台完成的，对于用户来说，登录体验和普通的自动登录体验是一样的。</p><p>在持久化令牌中，新增了两个经过 MD5 散列函数计算的校验参数，一个是 series，另一个是 token。</p><p>series 只有当用户在使用用户名/密码登录时，才会生成或者更新</p><p>token 只要有新的会话，就会重新生成，这样就可以避免一个用户同时在多端登录，</p><p>持久化令牌的具体处理类在<code>PersistentTokenBasedRememberMeServices </code>类中进行具体处理</p><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Security&quot;&gt;&lt;a href=&quot;#Spring-Security&quot; class=&quot;headerlink&quot; title=&quot;Spring Security&quot;&gt;&lt;/a&gt;Spring Security&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://g</summary>
      
    
    
    
    <category term="java" scheme="http://wajj.xin/categories/java/"/>
    
    <category term="Spring Security" scheme="http://wajj.xin/categories/java/Spring-Security/"/>
    
    <category term="SpringBoot" scheme="http://wajj.xin/categories/java/Spring-Security/SpringBoot/"/>
    
    
    <category term="java" scheme="http://wajj.xin/tags/java/"/>
    
    <category term="Spring Security" scheme="http://wajj.xin/tags/Spring-Security/"/>
    
    <category term="SpringBoot" scheme="http://wajj.xin/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
